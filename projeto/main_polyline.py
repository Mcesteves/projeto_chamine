from OpenGL.GL import *
import glfw

from camera import *
from polyline import *
from shader import *

def initialize (win):
  glClearColor(0,0,0,1)
  glEnable(GL_DEPTH_TEST)
  
  global camera
  camera = Camera(-2564.180176, 2089.380859, -3200.984863)
  arcball = camera.create_arcball()
  arcball.attach(win)

  global shader
  shader = Shader()
  shader.attach_vertex_shader("shader/vertex_polyline.glsl")
  shader.attach_fragment_shader("shader/fragment_polyline.glsl")
  shader.link() 
  shader.use_program()

  global curve
  curve = Polyline([
     -2564.180176, 2089.380859, -3200.984863,
    -2559.552734, 2086.266602, -3200.425781,
    -2551.880859, 2080.965576, -3199.842285,
    -2542.748047, 2074.500977, -3199.124268,
    -2533.711914, 2067.905273, -3198.382568,
    -2524.793945, 2061.153564, -3197.613281,
    -2516.022949, 2054.215820, -3196.810547,
    -2507.437256, 2047.054688, -3195.967529,
    -2499.089844, 2039.623291, -3195.075684,
    -2491.053711, 2031.864136, -3194.124023,
    -2483.430176, 2023.708740, -3193.098389,
    -2482.162842, 2022.352783, -3192.939941,
    -2473.262207, 2015.542603, -3192.606201,
    -2464.442871, 2008.626953, -3192.280273,
    -2455.713623, 2001.597290, -3191.963867,
    -2447.085205, 1994.443848, -3191.657715,
    -2438.569580, 1987.156372, -3191.363525,
    -2430.180420, 1979.722900, -3191.083008,
    -2421.934814, 1972.130371, -3190.817871,
    -2413.851318, 1964.364624, -3190.570801,
    -2405.953125, 1956.410034, -3190.344482,
    -2404.717041, 1955.013550, -3190.270508,
    -2397.961182, 1948.585815, -3189.685303,
    -2391.239258, 1942.122681, -3189.097168,
    -2384.552734, 1935.623047, -3188.506104,
    -2377.903076, 1929.086182, -3187.911865,
    -2371.291504, 1922.511108, -3187.314697,
    -2368.667969, 1919.860718, -3187.071777,
    -2361.186035, 1911.552246, -3186.233643,
    -2353.791992, 1903.166504, -3185.386230,
    -2346.490723, 1894.700928, -3184.529053,
    -2339.286865, 1886.153198, -3183.661621,
    -2332.168945, 1877.535278, -3182.782715,
    -2325.794434, 1870.747192, -3182.016602,
    -2319.403320, 1863.974976, -3181.246582,
    -2312.996094, 1857.218384, -3180.473145,
    -2306.572998, 1850.477051, -3179.696533,
    -2300.134277, 1843.750977, -3178.916748,
    -2293.680420, 1837.040039, -3178.134521,
    -2287.211670, 1830.343750, -3177.349854,
    -2280.728271, 1823.661865, -3176.562988,
    -2274.230469, 1816.994141, -3175.774170,
    -2267.718506, 1810.340454, -3174.983643,
    -2261.192871, 1803.700562, -3174.191650,
    -2258.563721, 1801.063599, -3173.878662,
    -2251.558838, 1794.916748, -3173.207520,
    -2244.514404, 1788.815430, -3172.535889,
    -2237.431885, 1782.758301, -3171.863281,
    -2230.312744, 1776.744263, -3171.190674,
    -2223.158691, 1770.772095, -3170.518066,
    -2215.970703, 1764.840698, -3169.846680,
    -2208.749756, 1758.948975, -3169.175293,
    -2201.497559, 1753.096191, -3168.505127,
    -2194.214844, 1747.281372, -3167.835938,
    -2186.902344, 1741.503784, -3167.167725,
    -2180.970703, 1736.991089, -3166.636475,
    -2173.259521, 1731.755127, -3165.987305,
    -2165.550293, 1726.515015, -3165.343994,
    -2157.843506, 1721.271118, -3164.706055,
    -2150.138916, 1716.023438, -3164.073730,
    -2142.436279, 1710.771973, -3163.446289,
    -2134.735596, 1705.516846, -3162.823975,
    -2127.037109, 1700.258057, -3162.206787,
    -2119.340576, 1694.995850, -3161.594238,
    -2111.645996, 1689.730347, -3160.986572,
    -2103.953613, 1684.461304, -3160.383301,
    -2097.754883, 1680.309448, -3159.984375,
    -2089.787842, 1675.429565, -3159.866699,
    -2081.822021, 1670.547852, -3159.747559,
    -2073.857422, 1665.664185, -3159.626709,
    -2065.894043, 1660.778564, -3159.504150,
    -2057.931885, 1655.891113, -3159.380127,
    -2049.970947, 1651.001587, -3159.254395,
    -2042.011230, 1646.109985, -3159.126953,
    -2034.052734, 1641.216431, -3158.997803,
    -2026.095581, 1636.320801, -3158.866943,
    -2018.139771, 1631.422974, -3158.734375,
    -2013.362671, 1628.490479, -3158.648926,
    -2005.283203, 1623.806641, -3158.356689,
    -1997.204468, 1619.121826, -3158.060059,
    -1989.126587, 1614.435913, -3157.759033,
    -1981.049438, 1609.749268, -3157.453369,
    -1972.973022, 1605.061523, -3157.142822,
    -1964.897339, 1600.372559, -3156.827148,
    -1956.822510, 1595.682617, -3156.506104,
    -1948.748535, 1590.991577, -3156.179932,
    -1940.675415, 1586.299438, -3155.847900,
    -1932.603271, 1581.606079, -3155.509766,
    -1924.651367, 1576.734375, -3155.184570,
    -1917.296509, 1570.976562, -3154.950928,
    -1909.942505, 1565.217651, -3154.715820,
    -1902.589355, 1559.457764, -3154.479248,
    -1895.237061, 1553.696899, -3154.240967,
    -1887.885620, 1547.934937, -3154.001465,
    -1880.534912, 1542.171997, -3153.760742,
    -1873.185181, 1536.408081, -3153.519043,
    -1865.836182, 1530.643066, -3153.276123,
    -1858.487915, 1524.877075, -3153.032227,
    -1851.140625, 1519.110107, -3152.787354,
    -1843.852539, 1513.272217, -3152.534424,
    -1836.878662, 1507.061035, -3152.239502,
    -1829.941406, 1500.809204, -3151.937988,
    -1823.041260, 1494.516724, -3151.630371,
    -1816.178833, 1488.183472, -3151.316650,
    -1809.354492, 1481.809570, -3150.996582,
    -1802.568726, 1475.395020, -3150.669434,
    -1795.821899, 1468.939697, -3150.336182,
    -1789.114746, 1462.443604, -3149.996826,
    -1782.447510, 1455.906738, -3149.651123,
    -1775.820801, 1449.329224, -3149.298340,
    -1771.846436, 1445.382812, -3149.078369,
    -1763.355103, 1438.085693, -3148.475586,
    -1754.976929, 1430.654785, -3147.930176,
    -1746.735718, 1423.066772, -3147.467529,
    -1738.663940, 1415.292847, -3147.124512,
    -1730.853394, 1407.256226, -3146.922852,
    -1724.873779, 1400.089478, -3146.494873,
    -1718.912964, 1392.907471, -3146.062256,
    -1712.971313, 1385.709717, -3145.625000,
    -1707.048828, 1378.496582, -3145.183594,
    -1701.145752, 1371.267822, -3144.737549,
    -1698.598755, 1368.555542, -3144.575439,
    -1690.207153, 1361.128296, -3144.209717,
    -1681.913696, 1353.587646, -3143.950439,
    -1673.736816, 1345.917236, -3143.841553,
    -1665.702026, 1338.098267, -3143.949707,
    -1661.790649, 1334.087769, -3144.053711,
    -1655.639160, 1327.060791, -3143.767090,
    -1649.469116, 1320.050049, -3143.482910,
    -1643.280762, 1313.055542, -3143.201904,
    -1637.074097, 1306.077148, -3142.923828,
    -1630.849121, 1299.114624, -3142.648193,
    -1624.622925, 1292.156494, -3142.326172,
    -1617.285889, 1283.703979, -3141.665771,
    -1611.235229, 1276.603271, -3141.146973,
    -1606.337646, 1269.108276, -3140.506592,
    -1606.893921, 1258.033569, -3138.849121,
    -1607.173706, 1246.942627, -3137.230469,
    -1607.152222, 1235.841675, -3135.658203,
    -1607.273193, 1233.997192, -3135.392090,
    -1607.943359, 1222.916260, -3133.822510,
    -1608.151611, 1211.806396, -3132.332275,
    -1607.829956, 1200.686035, -3130.946777,
    -1606.903076, 1189.583984, -3129.698975,
    -1605.291382, 1178.541748, -3128.632568,
    -1602.916992, 1167.617798, -3127.805664,
    -1600.391235, 1158.634644, -3127.449219,
    -1597.609497, 1147.776978, -3127.742188,
    -1596.235962, 1142.344604, -3127.898926,
    -1593.457031, 1133.426758, -3128.121582,
    -1590.735474, 1124.490601, -3128.323486,
    -1587.547363, 1113.743286, -3128.537598,
    -1584.957031, 1104.767456, -3128.691162,
    -1582.428467, 1095.773560, -3128.821777,
    -1579.963257, 1086.761841, -3128.927979,
    -1577.090454, 1075.924438, -3129.021240,
    -1574.769409, 1066.873901, -3129.069092,
    -1572.074341, 1055.990479, -3129.088867,
    -1569.905396, 1046.902222, -3129.071777,
    -1567.397583, 1035.974243, -3129.008789,
    -1564.996094, 1025.022949, -3128.895996,
    -1564.385498, 1021.354553, -3128.666992,
    -1563.394287, 1010.294678, -3127.115723,
    -1562.587891, 999.235474, -3125.455811,
    -1562.116333, 991.875671, -3124.258301,
    -1561.160400, 986.558655, -3122.767090,
    -1559.224854, 976.122437, -3119.156250,
    -1557.981689, 969.257629, -3116.488770,
    -1555.846802, 959.927246, -3110.649170,
    -1555.488159, 958.368835, -3109.683105,
    -1553.045898, 948.906372, -3104.187256,
    -1552.423584, 945.601685, -3102.596680,
    -1551.039429, 935.225952, -3098.579102,
    -1550.303223, 930.067383, -3096.520752,
    -1547.135986, 920.070557, -3092.554199,
    -1544.341919, 911.716248, -3089.442383,
    -1540.952271, 901.671082, -3085.795654,
    -1539.179443, 896.721191, -3083.887207,
    -1539.090576, 895.070740, -3083.023682,
    -1539.646729, 885.129944, -3077.878418,
    -1539.645264, 881.851135, -3076.095215,
    -1540.818848, 871.861267, -3071.157227,
    -1540.974976, 868.586670, -3069.373535,
    -1542.560059, 859.451111, -3063.086670,
    -1543.170898, 858.343445, -3061.742920,
    -1547.280762, 853.780396, -3054.888672,
    -1556.528320, 851.485596, -3049.065186,
    -1558.192749, 851.661560, -3048.245605,
    -1568.352173, 854.008179, -3044.160889,
    -1576.876831, 856.811890, -3041.571289,
    -1587.128296, 860.807434, -3039.421875,
    -1597.327026, 865.130249, -3037.689941,
    -1607.479858, 869.664246, -3036.252197,
    -1617.595703, 874.342590, -3035.029785,
    -1622.633789, 876.739563, -3034.488037,
    -1627.397095, 879.577148, -3033.901123,
    -1636.026489, 886.272766, -3031.389160,
    -1645.149170, 892.467407, -3029.368896,
    -1654.532349, 898.363281, -3027.666992,
    -1664.068726, 904.069397, -3026.182373,
    -1673.703247, 909.648071, -3024.852783,
    -1676.959961, 911.429321, -3024.425781,
    -1685.215942, 915.675049, -3023.370605,
    -1693.480835, 919.918823, -3022.378906,
    -1701.752563, 924.161072, -3021.439941,
    -1710.029907, 928.402161, -3020.544922,
    -1711.671631, 929.261902, -3020.328369
     ])

def display ():
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
  shader.use_program()
  global stack
  stack = [glm.mat4(1.0)]  
  mv = stack[-1]
  if shader.get_lightning_space() == "camera":
     mv = camera.get_view_matrix() * mv
  mn = glm.transpose(glm.inverse(mv))
  mvp = camera.get_projection_matrix() * mv * stack[-1]
  shader.set_uniform("mvp",mvp)
  shader.set_uniform("mv",mv)
  shader.set_uniform("mn",mn)
  shader.set_uniform("light",glm.vec4(0.0, 0.0, 4.0, 1.0))
  
  curve.draw()

def resize(win, width, height):
   glViewport(0, 0, width, height)

def main():
    # Initialize the library
    if not glfw.init():
        return
    # Create a windowed mode window and its OpenGL context
    glfw.window_hint(glfw.CONTEXT_VERSION_MAJOR,4)
    glfw.window_hint(glfw.CONTEXT_VERSION_MINOR,1)
    glfw.window_hint(glfw.OPENGL_PROFILE, glfw.OPENGL_CORE_PROFILE)
    glfw.window_hint(glfw.OPENGL_FORWARD_COMPAT,GL_TRUE)

    win = glfw.create_window(800, 600, "Projeto Final", None, None)
    glfw.set_framebuffer_size_callback(win, resize)

    if not win:
        glfw.terminate()
        return

    # Make the window's context current
    glfw.make_context_current(win)

    
    print("OpenGL version: ",glGetString(GL_VERSION))

    initialize(win)
    prev_time = 0.0
    crnt_time = 0.0
    time_diff = 0.0
    counter = 0

    # Loop until the user closes the window
    while not glfw.window_should_close(win):
        crnt_time = glfw.get_time()
        time_diff = crnt_time - prev_time
        counter += 1
        if time_diff >= 1.0/30.0:
           fps = str((1.0/time_diff)*counter)
           new_title = "Projeto Final - FPS "+ fps
           glfw.set_window_title(win, new_title)
           prev_time = crnt_time
           counter = 0
        # Render here, e.g. using pyOpenGL
        display()

        # Swap front and back buffers
        glfw.swap_buffers(win)

        # Poll for and process events
        glfw.poll_events()

    glfw.terminate()

if __name__ == "__main__":
    main()